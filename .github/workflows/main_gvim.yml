# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - GVIM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      # Install system dependencies for Cairo and other requirements
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev pkg-config python3-dev libxrender1 libxext6 libfontconfig1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Make a copy of requirements.txt without pycairo for safer installation
          grep -v pycairo requirements.txt > requirements-no-pycairo.txt || true
          pip install -r requirements-no-pycairo.txt
          # Install pycairo separately with system dependencies available
          pip install pycairo
          # Install gunicorn and eventlet for production serving
          pip install gunicorn eventlet

      # Create deployment configuration files
      - name: Create deployment files
        run: |
          # Create startup script for Azure
          echo "gunicorn --worker-class eventlet -w 1 --bind=0.0.0.0:8000 app:app" > startup.sh
          chmod +x startup.sh
          
          # Create Procfile for compatibility
          echo "web: gunicorn --worker-class eventlet -w 1 app:app" > Procfile
          
          # Create run.py for direct execution
          cat > run.py << 'EOL_INNER'
          import os
          from app import app, socketio
          
          if __name__ == "__main__":
              port = int(os.environ.get("PORT", 8000))
              socketio.run(app, host='0.0.0.0', port=port)
          EOL_INNER
          
          # Create web.config for Azure Windows hosting
          cat > web.config << 'EOL_INNER'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="PythonHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified"/>
              </handlers>
              <httpPlatform processPath="%home%\python39\python.exe"
                            arguments="%home%\site\wwwroot\run.py"
                            stdoutLogEnabled="true"
                            stdoutLogFile="%home%\LogFiles\stdout"
                            startupTimeLimit="60">
                <environmentVariables>
                  <environmentVariable name="PORT" value="%HTTP_PLATFORM_PORT%" />
                  <environmentVariable name="PYTHONPATH" value="%home%\site\wwwroot" />
                </environmentVariables>
              </httpPlatform>
            </system.webServer>
          </configuration>
          EOL_INNER

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_A8518B669BEA4EDEAA62F0C6FAB96A61 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_04E4A0CFF36944268ACB984E5445ECB8 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F7461E1A8E9C4B31B778D0BA8F803E15 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'GVIM'
          slot-name: 'Production'
          startup-command: 'gunicorn --worker-class eventlet -w 1 --bind=0.0.0.0:8000 app:app'
