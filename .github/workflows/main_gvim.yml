# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - GVIM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      # Install system dependencies needed for pycairo and other packages
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev pkg-config python3-dev libfontconfig1-dev libfreetype6-dev libpng-dev libtiff-dev libxcb1-dev libxrender-dev libxml2-dev

      # Install Python dependencies with special handling for pycairo
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Create a production requirements file with only essential dependencies
          cat > requirements-prod.txt << 'EOL'
          Flask==3.0.3
          flask-socketio==5.4.1
          flask-cors==3.0.10
          gunicorn==21.2.0
          eventlet==0.33.3
          python-dotenv==1.0.1
          rdkit-pypi==2022.9.5
          numpy==1.26.4
          pillow==10.3.0
          requests==2.32.2
          py3Dmol==2.4.0
          EOL
          
          # Install pycairo first with system dependencies available
          pip install pycairo
          
          # Install only essential packages for production
          pip install -r requirements-prod.txt
          
          # Install additional packages for production deployment
          pip install gunicorn eventlet

      # Create necessary deployment files for Azure
      - name: Create deployment files
        run: |
          # Create simplified startup file for Azure
          cat > azure_startup.py << 'EOL'
          import os
          import logging
          from app import app, socketio
          
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          if __name__ == "__main__": 
              port = int(os.environ.get("PORT", 8000))
              logger.info(f"Starting application on port {port}")
              socketio.run(app, host='0.0.0.0', port=port, debug=False)
          EOL

          # Create simplified web.config
          cat > web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="PythonHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified"/>
              </handlers>
              <httpPlatform processPath="%home%\python39\python.exe"
                            arguments="%home%\site\wwwroot\azure_startup.py"
                            stdoutLogEnabled="true"
                            stdoutLogFile="%home%\LogFiles\stdout"
                            startupTimeLimit="120">
                <environmentVariables>
                  <environmentVariable name="PORT" value="%HTTP_PLATFORM_PORT%" />
                  <environmentVariable name="PYTHONPATH" value="%home%\site\wwwroot" />
                </environmentVariables>
              </httpPlatform>
            </system.webServer>
          </configuration>
          EOL
          
          # Create .deployment file to specify deployment settings
          echo "[config]" > .deployment
          echo "command = gunicorn --worker-class eventlet -w 1 app:app" >> .deployment
          
          # Create runtime.txt to specify Python version
          echo "python-3.9" > runtime.txt

      - name: Zip artifact for deployment
        run: |
          # 删除不必要的文件和目录
          rm -rf __pycache__ tests *.pyc .git* venv
          # 只打包必要的文件
          zip release.zip app.py azure_startup.py static/* templates/* requirements-prod.txt .deployment runtime.txt web.config

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Clean deployment directory
        run: |
          rm -rf .git .github __pycache__ .pytest_cache
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -name "*.pyc" -delete

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_A8518B669BEA4EDEAA62F0C6FAB96A61 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_04E4A0CFF36944268ACB984E5445ECB8 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F7461E1A8E9C4B31B778D0BA8F803E15 }}

      # Add step to get resource group name
      - name: Get Resource Group Name
        id: getresourcegroup
        run: |
          # Use the same app name as in the deploy step
          RESOURCE_GROUP=$(az webapp show --name "gvim" --query "resourceGroup" -o tsv || echo "")
          if [ -z "$RESOURCE_GROUP" ]; then
            echo "Could not automatically determine resource group, using default value"
            RESOURCE_GROUP="gvim-resource-group"
          fi
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
          echo "Resource group name: $RESOURCE_GROUP"
      
      # Stop the web app before deployment to prevent SCM container restart issues
      - name: Stop Web App
        run: |
          az webapp stop --name "gvim" --resource-group "$RESOURCE_GROUP"
          # Add delay to ensure stop operation completes
          echo "Waiting for 30 seconds to ensure web app is fully stopped..."
          sleep 30

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'gvim'
          slot-name: 'Production'
          resource-group: ${{ env.RESOURCE_GROUP }}
          package: .
          clean: true
          startup-command: 'gunicorn --worker-class eventlet -w 1 -t 120 --timeout 120 app:app'
          respect-pom-xml: false
      
      # Add delay after deployment before starting
      - name: Delay after deployment
        run: |
          echo "Waiting for 15 seconds to ensure deployment is complete..."
          sleep 15
      
      # Start the web app after deployment
      - name: Start Web App
        run: |
          az webapp start --name "gvim" --resource-group "$RESOURCE_GROUP"
