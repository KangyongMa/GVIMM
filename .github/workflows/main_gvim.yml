# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - GVIM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      # Install system dependencies needed for pycairo and other packages
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev pkg-config python3-dev libfontconfig1-dev libfreetype6-dev libpng-dev libtiff-dev libxcb1-dev libxrender-dev libxml2-dev

      # Install Python dependencies with special handling for pycairo
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Create a simplified requirements file for Azure
          cat > requirements.txt << 'EOL'
          Flask==3.0.3
          flask-socketio==5.4.1
          flask-cors==3.0.10
          gunicorn==21.2.0
          eventlet==0.33.3
          python-dotenv==1.0.1
          rdkit-pypi==2022.9.5
          numpy==1.26.4
          pillow==10.3.0
          requests==2.32.2
          py3Dmol==2.4.0
          EOL
          
          # Install pycairo first with system dependencies available
          pip install pycairo
          
          # Install required packages
          pip install -r requirements.txt
          
          # Install additional packages for production deployment
          pip install gunicorn eventlet

      # Create necessary deployment files for Azure
      - name: Create deployment files
        run: |
          # Create startup.sh for Azure
          cat > startup.sh << 'EOL'
          #!/bin/bash
          cd /home/site/wwwroot
          exec gunicorn --worker-class eventlet -w 1 --timeout 120 app:app
          EOL
          chmod +x startup.sh
          
          # Create web.config for Azure
          cat > web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="PythonHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified"/>
              </handlers>
              <httpPlatform processPath="%home%\site\wwwroot\startup.sh"
                            stdoutLogEnabled="true"
                            stdoutLogFile="%home%\LogFiles\stdout">
              </httpPlatform>
            </system.webServer>
          </configuration>
          EOL
          
          # Create .deployment file for Azure Kudu
          cat > .deployment << 'EOL'
          [config]
          SCM_DO_BUILD_DURING_DEPLOYMENT=true
          EOL

      - name: Zip artifact for deployment
        run: |
          # Create zip archive excluding unnecessary files
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -name "*.pyc" -delete
          rm -rf venv .git .github .pytest_cache tests
          zip -r app.zip .

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: app.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip deployment package
        run: |
          mkdir -p deploy
          unzip -q app.zip -d deploy

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_A8518B669BEA4EDEAA62F0C6FAB96A61 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_04E4A0CFF36944268ACB984E5445ECB8 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F7461E1A8E9C4B31B778D0BA8F803E15 }}

      # Using a static resource group name instead of trying to look it up
      - name: Set Resource Group Name
        run: |
          # Hardcode the resource group name
          echo "RESOURCE_GROUP=gvim-resource-group" >> $GITHUB_ENV
          echo "APP_NAME=gvim" >> $GITHUB_ENV

      # Stop the web app before deployment to prevent SCM container restart issues
      - name: Stop Web App
        run: |
          az webapp stop --name "${{ env.APP_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" || echo "Warning: Could not stop web app"
          # Add delay to ensure stop operation completes
          echo "Waiting for 30 seconds to ensure web app is fully stopped..."
          sleep 30

      # Configure app settings before deployment to control Oryx build
      - name: Configure pre-deployment settings
        run: |
          echo "Configuring app settings before deployment..."
          az webapp config appsettings set --name "${{ env.APP_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" \
            --settings \
              "SCM_DO_BUILD_DURING_DEPLOYMENT=true" \
              "PYTHON_VERSION=3.9" \
              "ENABLE_ORYX_BUILD=true" \
          || echo "Warning: Could not set app settings. Continuing anyway."
          
          # Wait before deployment to avoid conflicts
          echo "Waiting 10 seconds before deployment..."
          sleep 10

      # Using direct Azure CLI command for deployment to avoid publishing profile requirements
      - name: Deploy to Azure with CLI
        id: deploy-with-cli
        run: |
          echo "Deploying to Azure Web App using Azure CLI..."
          az webapp deployment source config-zip \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "${{ env.APP_NAME }}" \
            --src ./app.zip \
            --timeout 180
          
          # Save the web app URL for output
          WEBAPP_URL="https://${{ env.APP_NAME }}.azurewebsites.net"
          echo "webapp-url=$WEBAPP_URL" >> $GITHUB_OUTPUT
          echo "Web app deployed at: $WEBAPP_URL"
      
      # Wait after deployment before configuration
      - name: Wait after deployment
        run: |
          echo "Waiting 30 seconds after deployment..."
          sleep 30

      # Configure app settings after deployment
      - name: Configure post-deployment settings
        run: |
          echo "Configuring final app settings..."
          az webapp config set --name "${{ env.APP_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" \
            --python-version "3.9" \
            --startup-file "startup.sh" \
          || echo "Warning: Could not set config. Continuing anyway."
          
          # Restart the app to apply settings
          echo "Restarting app to apply settings..."
          az webapp restart --name "${{ env.APP_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" \
          || echo "Warning: Could not restart webapp. Please check the deployment."
